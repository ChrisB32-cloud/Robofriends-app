{"ast":null,"code":"var _jsxFileName = \"/Users/chrisbrown/Desktop/Robofriends-app/src/container/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestRobots } from '../actions';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.errors\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nconst App = ({\n  searchField,\n  onSearchChange,\n  robots,\n  onRequestRobots\n}) => {\n  _s();\n\n  useEffect(() => {\n    onRequestRobots();\n  }, []);\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n  return !robots.length ? /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tc\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"f1\",\n      children: \"RoboFriends\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      searchChange: onSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n      children: /*#__PURE__*/_jsxDEV(ErrorBoundry, {\n        children: /*#__PURE__*/_jsxDEV(CardList, {\n          robots: filteredRobots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 13\n  }, this);\n};\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // const [robots, setRobots] = useState([])\n// const [searchField, setSearchField] = useState('')\n// const [count, setCount] = useState(0)\n// console.log(store.getState());\n// fetch('https://jsonplaceholder.typicode.com/users')\n//     .then(response => response.json())\n//     .then(users => setRobots(users))\n// const onSearchChange = (event) => {\n//     setSearchField(event.target.value)\n// }\n\n{\n  /* {count} */\n}\n{\n  /* <button onClick={() => setCount(count + 1)} >Click me!</button> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chrisbrown/Desktop/Robofriends-app/src/container/App.js"],"names":["React","useState","useEffect","connect","CardList","SearchBox","Scroll","ErrorBoundry","setSearchField","requestRobots","mapStateToProps","state","searchField","searchRobots","robots","isPending","error","errors","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,YAA9C;AACA,OAAO,WAAP;;;AAGA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAD7B;AAEHE,IAAAA,MAAM,EAAEH,KAAK,CAACF,aAAN,CAAoBK,MAFzB;AAGHC,IAAAA,SAAS,EAAEJ,KAAK,CAACF,aAAN,CAAoBM,SAH5B;AAIHC,IAAAA,KAAK,EAAEL,KAAK,CAACF,aAAN,CAAoBQ;AAJxB,GAAP;AAMH,CAPD;;AASA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACX,cAAc,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CADhC;AAEHC,IAAAA,eAAe,EAAE,MAAML,QAAQ,CAACV,aAAa,EAAd;AAF5B,GAAP;AAIH,CALD;;AAQA,MAAMgB,GAAG,GAAG,CAAC;AAAEb,EAAAA,WAAF;AAAeQ,EAAAA,cAAf;AAA+BN,EAAAA,MAA/B;AAAuCU,EAAAA;AAAvC,CAAD,KAA8D;AAAA;;AAKtEtB,EAAAA,SAAS,CAAC,MAAM;AAEZsB,IAAAA,eAAe;AAClB,GAHQ,EAGN,EAHM,CAAT;AAOA,QAAME,cAAc,GAAGZ,MAAM,CAACa,MAAP,CAAcC,KAAK,IAAI;AAC1C,WAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCnB,WAAW,CAACkB,WAAZ,EAAlC,CAAP;AACH,GAFsB,CAAvB;AAMA,SAAO,CAAChB,MAAM,CAACkB,MAAR,gBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADG,gBAIC;AAAK,IAAA,SAAS,EAAC,IAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEZ;AAAzB;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,MAAD;AAAA,6BACI,QAAC,YAAD;AAAA,+BACI,QAAC,QAAD;AAAU,UAAA,MAAM,EAAEM;AAAlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAJR;AAeH,CAjCD;;GAAMD,G;;KAAAA,G;AAmCN,eAAetB,OAAO,CAACO,eAAD,EAAkBQ,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf,C,CAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAAC;AAAe;AAChB;AAAC;AAAuE","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestRobots } from '../actions'\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.errors\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\n\nconst App = ({ searchField, onSearchChange, robots, onRequestRobots }) => {\n\n\n\n\n    useEffect(() => {\n\n        onRequestRobots()\n    }, [])\n\n\n\n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n\n\n    return !robots.length ?\n        <h1>Loading</h1> :\n        (\n\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n// const [robots, setRobots] = useState([])\n// const [searchField, setSearchField] = useState('')\n// const [count, setCount] = useState(0)\n\n\n// console.log(store.getState());\n// fetch('https://jsonplaceholder.typicode.com/users')\n//     .then(response => response.json())\n//     .then(users => setRobots(users))\n\n// const onSearchChange = (event) => {\n//     setSearchField(event.target.value)\n\n// }\n\n{/* {count} */ }\n{/* <button onClick={() => setCount(count + 1)} >Click me!</button> */ }"]},"metadata":{},"sourceType":"module"}